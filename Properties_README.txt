# =============================================================================
#
#             Properties file README for CellProfiler Analyst 3.0
#
# NOTE: CPA 3.0 will read CPA properties files from 2.x versions, but older
#       files from 1.x versions are incompatible.
#
# This file is an example properties file to help users of CPA 3.0 to set up
# your own properties file.  The syntax is simple.  Lines that begin with the
# "#" sign are comments which are ignored by CPA.  All other lines must be in
# one of one of the following 2 forms:
#
#    property_name  =  value 
#    property_list  =  value1, value2
#
# Optional fields may be left blank:
#
#    optional_property  =
#
# Below, many properties are filled in with example values surrounded by angled
# brackets like <this>.  These MUST BE REPLACED.  Values not flanked by angled
# bracked are suggested guesses.  These values may work as-is, but do read the
# description for each section so you know whether it applies to you. 
#
# =============================================================================

# ======== Database Info ======== 
# CPA needs to know how to access your MySQL database.

db_type    =  mysql
db_port    =  3306
db_host    =  <your_host_name>
db_name    =  <your_database_name>
db_user    =  <your_user_name>
db_passwd  =  <your_password>


	# ALTERNATE DATA SOURCE FIELDS:
	#   The sections below may be used to connect to your data if you are not  
	#   using a MySql database.  Note that they are used in place of the fields 
	#   above.
	
	# ======== Reading "ExportToDatabase" Files ========
	# Another option for loading primary image and object data is to load data
	# directly from the CSV files generated by CellProfiler's ExportToDatabase
	# module. To do this, set db_sql_file to the path to the SETUP.SQL file 
	# created by ExportToDatabase. This file must be in the same directory as  
	# the CSV files storing the data. CPA will use the files to create an SQLite
	# database in your home directory.
	#
	# NOTE: You must COMMENT OUT THE FIELDS in the Database Info section and
	#   uncomment the fields below.
	
	#db_type      =  sqlite
	#db_sql_file  =  </path/to/setup.sql>
	
	
	# ======== SQLite Database Info ========
	# Not to be confused with db_sql_file, the db_sqlite_file field may be set
	# to the path of a valid SQLite database file containing your per_image and
	# per_object tables.
	#
	# NOTE: You must COMMENT OUT THE FIELDS in the Database Info section and
	#   uncomment the fields below.
	
	#db_type         =  sqlite
	#db_sqlite_file  =  </path/to/sqlite_database.db>
	
	
	# ======== CSV File Info ========
	# You may use CSV files for your per-image and per-object tables in place of
	# a MySQL database. CPA will use them to create a SQLite database in your
	# home directory.
	#
	# NOTE: You must COMMENT OUT THE FIELDS in the Database Info section and 
	#  uncomment the fields below.
	
	#db_type          =  sqlite
	#image_csv_file   =  </path/to/per_image.csv>
	#object_csv_file  =  </path/to/per_object.csv>


# ======== Database Tables ======== 
image_table   =  <your_per_image_table_name>
object_table  =  <your_per_object_table_name>


# ======== Database Columns ======== 
# Specify the database column names that contain unique IDs for images and 
# objects (and optionally tables).
#
# table_id (OPTIONAL): This field lets CPA handle multiple tables if you merge
#          them into one and add a table_number column as a foreign key to your
#          per-image and per-object tables.
# image_id: must be a foreign key column between your per-image and per-object
#           tables
# object_id: the object key column from your per-object table

table_id    =  <your_table_number_key_column>
image_id    =  <your_image_number_key_column>
object_id   =  <your_object_number_key_column>
plate_id    =  <your_plate_id_column>
well_id     =  <your_well_id_column>

# Also specify the column names that contain X and Y coordinates for each 
# object within an image.

cell_x_loc  =  <your_object_x_location_column>
cell_y_loc  =  <your_object_y_location_column>
cell_z_loc  =  <your_object_z_location_column>


# ======== Image Path and Filename Columns ========
# CPA needs to know where to find the images from your experiment.
# Specify the column names from your per-image table that contain the image
# paths and file names here.
#
# Any number of images may be combined by adding a new channel path and filename
# column to the per-image table of your database and then adding those column 
# names here.
#
# NOTE: These lists must have equal length!

image_path_cols  =  <col_containing_dna_stain_image_paths>, <col_containing_actin_stain_image_paths>,
image_file_cols  =  <col_containing_dna_stain_image_filenames>, <col_containing_actin_stain_image_filenames>,

# Give short names for each of the images listed above

image_names   =  <DNA>, <Actin>,

# Specify a default color for each of the channels (respectively)
# Valid colors are: [red, green, blue, magenta, cyan, yellow, gray, none]

image_channel_colors  =  <red>, <green>,

# How to blend in each channel into the image. Use: add, subtract, or solid.
# If left blank all channels are blended additively, this is best for 
# fluorescent images.
#
# Subtract or solid may be desirable when you wish to display outlines over a 
# brightfield image so the outlines are visible against the light background.

image_channel_blend_modes = <add>, <add>,

# Number of channels present in each image file?  If left blank, CPA will expect 
# to find 1 channel per image.
#
# eg: If the image specified by the first image_channel_file field is RGB, but
# the second image had only 1 channel you would set: channels_per_image = 3, 1
# Doing this would require that you pass 4 values into image_names,
# image_channel_colors, and image_channel_blend_modes

channels_per_image  = <1>, <1>,

# Some features in CPA can take advantage of thumbnail images if they are stored
# as "BLOBs" in your per-image table. Specify the column names for each image 
# channel thumbnail separately here.

image_thumbnail_cols = <col_containing_dna_stain_thumbnail>, <col_containing_actin_stain_thumbnail>,



# ======== Image access info ======== 
# Specify for HTTP image access. This address will be prepended to the image 
# path and filename pulled from the database columns listed above when loading
# an image.
#
# Example: If you set image_url_prepend to "http://yourserver.com/" and the
#   path and filename in the database for a given image are "yourpath" and 
#   "file.png"
#   CPA will try to open "http://yourserver.com/yourpath/file.png"
# 
# Leave blank if images are stored locally.

image_url_prepend  =  <http://yourserver.com>


# ======== Dynamic Groups ========
# OPTIONAL
# Here you can define ways of grouping your image data, by linking column(s)
# that identify unique images (the image-key) to a unique group of columns the
# (group-key). Note that the group-key columns may come from other tables, so 
# long as the tables have a common key.
# 
# Example: With the "Well" group defined below, Classifier will allow you to
#   fetch cells from images from a particular well by providing you with a well
#   dropdown in the user interface. It will also allow you to group your data
#   by each unique well value when scoring.
#
# Example 2: Also note the "Plate_and_Well" group. This group specifies unique
#   pairs of plate and well values. Since well values such as "A01" are likely
#   to NOT be unique across multiple plates, this will provide a way to refer
#   to cells from, plate X, well A01, rather than just any well named "A01".
#  
# FORMAT:
#   group_XXX  =  MySQL select statement that returns image-key columns followed by group-key columns. XXX will be the name of the group.
# EXAMPLE GROUPS:
#   group_SQL_Well        =  SELECT TableNumber, ImageNumber, well FROM Per_Image_Table
#   group_SQL_Plate_and_Well  =  SELECT Per_Image_Table.TableNumber, Per_Image_Table.ImageNumber, Well_ID_Table.Plate, Per_Image_Table.well FROM Per_Image_Table, WELL_ID_Table WHERE Per_Image_Table.well=Well_ID_Table.well
#   group_SQL_Treatment   =  SELECT Per_Image_Table.TableNumber, Per_Image_Table.ImageNumber, Well_ID_Table.treatment FROM Per_Image_Table, Well_ID_Table WHERE Per_Image_Table.well=Well_ID_Table.well

group_SQL_YourGroupName  =  


# ======== Image Filters ========
# OPTIONAL
# Here you can define image filters to let you fetch or score objects from a 
# subset of the images in your experiment.
#
# Example: With the CDKs filter defined below, Classifier will provide an extra
#   option to fetch cells from CDKs... that is, images who's corresponding gene
#   entry starts with CDK.
#
# FORMAT:
#   filter_SQL_XXX  =  MySQL select statement that returns image-key columns for images you wish to filter out. XXX will be the name of the filter.
# EXAMPLE FILTERS:
#   filter_SQL_EMPTY  =  SELECT TableNumber, ImageNumber FROM CPA_per_image, Well_ID_Table WHERE CPA_per_image.well=Well_ID_Table.well AND Well_ID_Table.Gene="EMPTY"
#   filter_SQL_CDKs   =  SELECT TableNumber, ImageNumber FROM CPA_per_image, Well_ID_Table WHERE CPA_per_image.well=Well_ID_Table.well AND Well_ID_Table.Gene REGEXP 'CDK.*'

filter_SQL_YourFilterName  =  


# ======== Meta data ======== 
# What are your objects called? (e.g. cells, worms, etc.)
# This is used to provide the correct syntax for the GUI.
# FORMAT:  object_name  =  singular name, plural name

object_name  =  cell, cells,

# What size plates were used?  384 or 96?
plate_type   =  


# ======== Excluded Columns ======== 
# OPTIONAL
# Classifier uses columns in your per_object table to find rules. It will 
# automatically ignore ID columns defined in table_id, image_id, and object_id 
# as well as any columns that contain non-numeric data.
#
# Here you may list other columns in your per_object table that you wish the 
# classifier to ignore when finding rules.
#
# You may also use regular expressions here to match more general column names.
#
# WARNING: These strings currently cannot contain commas (,)
#
# Example: classifier_ignore_columns = WellID, Meta_.*, .*_Position
#   This will ignore any column named "WellID", any columns that start with
#   "Meta_", and any columns that end in "_Position".

classifier_ignore_columns  =  <your_object_x_location_column>, <your_object_y_location_column>, <meta_.*>, 


# ======== Other ======== 
# Classifier will show you square thumbnails of objects cropped from their 
# original images. Specify the thumbnail size here. The approximate maximum 
# diameter of your objects (in pixels) is a good start.

image_tile_size  =  50

# OPTIONAL
# Provides the image width and height. Used for per-image classification.
# If not set, it will be obtained from the Image_Width and Image_Height 
# measurements in CellProfiler.

image_width  = 
image_height = 

# OPTIONAL
# Image Gallery can use a different tile size (in pixels) to create thumbnails for images
# If not set, it will be the same as image_tile_size

image_size = 

# ======== Classification type =======
# OPTIONAL
# CPA 2.2.0 allows image classification instead of object classification.
# If left blank or set to "object", then Classifier will fetch objects (default).
# If set to "image", then Classifier will fetch whole images instead of objects.

classification_type =  


# ======== Auto Load Training Set ========
# OPTIONAL
# You may enter the full path to a training set that you would like Classifier
# to automatically load when started.

training_set  =  


# ======== Area Based Scoring ========
# OPTIONAL
# You may specify a column in your per-object table which will be summed and 
# reported in place of object-counts when scoring.  The typical use for this
# is to report the areas of objects on a per-image or per-group basis. 

area_scoring_column  =  


# ======== Output Per-Object Classes ========
# OPTIONAL
# Here you can specify a MySQL table in your Database where you would like 
# Classifier to write out class information for each object in the 
# object_table 

class_table  =  


# ======== Check Tables ========
# OPTIONAL
# [yes/no]  You can ask CPA to check your tables for anomalies such as
# orphaned objects or missing column indices.  Default is on.
# This check is run when Classifier starts and may take up to a minute if
# your object_table is extremely large.

check_tables = yes


# ======== Force BioFormats ========
# OPTIONAL
# [yes/no]  By default, CPA will try to use the imageio library to load images
# which are in supported formats, then fall back to using the older BioFormats
# loader if something goes wrong. ImageIO is faster but some unusual file
# compression formats can cause errors when loading. This option forces CPA to
# always use the BioFormats reader. Try this if images aren't displayed correctly.

force_bioformats = no


# ======== Use Legacy Fetcher ========
# OPTIONAL
# [yes/no]  In CPA 3.0 the object fetching system has been revised to be more
# efficient. In the vast majority of cases it should be faster than the previous
# versions. However, some complex object filters can still cause problems. If you
# encounter slowdowns this setting allows you to switch back to the old method of
# fetching and randomisation.

use_legacy_fetcher = no

# ======== Process as 3D (visualize a different z position per object) ========
# OPTIONAL
# [yes/no]  In 3D datasets, this optionally displays in CPA classifier a separate
# z slice for each object depending on that object's center position in z. Useful
# for classifying cells from 3D data.

process_3D = no


